语法一：
	普通字符匹配：（字母，数字，汉字，下划线，各种标点符号）
语法二：
	简单的转义字符
	\n 换行符
	\t 制表符
	\\  代表\本身
	\^,\$,\.,\(,\),\{,\},\?,\+,\*,\|,\[,\] 代表这些字符本身
语法三：
	标准的字符匹配
	能够与多种字符匹配的表达式
	大写表示反义
	\d 任意一个数字，0~9中的任意一个
	\w 任意一个字母或数字或下划线，也就是A~Z,a~z,0~9,_中任意一个
	\s 表示空格，制表符，换行符等等空白符中的任意一个
	. 小数点可以匹配除\n任意一个字符，如要匹配\n在内的所有字符可以使用[\s\S]
语法四：
	自定义字符集合
	[]方括号匹配方式，能够匹配方括号中的任意一个字符
	[av5@]匹配a或v或5或@
	[^abc]匹配 a  b c 之外的任意一个字符
	[f-k]匹配f~k之间之间的任意一个字符
	[^f-k1-3]匹配除f~k 1-3的任意一个字符
	除了^ - 其他特殊符号在方括号中不再包含特殊含义
	标准字符集中的\d \w \s出现在方括号中将包含该集合 [\d.+\-] 将包含所有数字 .号 +号 -号
语法五：
	量词
	{n} 表达式将重复n次
	{m,n}表达式将至少重复m次，最多重复n次
	{m,} 表达式至少重复m次
	? 表达式出现0次或者1次 相当于{0,1}
	+ 表达式出现至少1次 相当于{1,}
	* 表达式不出现或者出现任意次数{0,}

	默认是贪婪模式 匹配字符数越多越好
	在量词后再加上一个?号则为非贪婪模式 匹配字符越少越好
语法六：
	零宽匹配：不占位置
	^匹配字符串的开头
	$匹配字符串的结尾
	\b匹配左右不全是\w的位置
语法七：
	I 忽略大小写模式
	S单行模式（将整个文本看成一个字符串）.可以匹配\n在内的字符
	M多行模式每行都是一个字符串，都有开头和结尾 \A \Z匹配最开头和最结尾
语法八：
	选择符和分组
	| 分支结构 使得左右两边为或的关系
	()捕获组 0为整个表达式的捕获内容  然后依次按顺序编组 使用\nnn引用
	(?<name>) 可以命名 \name引用
	(?:exp)可以使用括号但是不编组
语法九：
	零宽断言
	(?=exp) 断言自身出现的位置后面能匹配表达式exp
	(?<=exp) 断言自身出现的位置前面能匹配表达式exp
	(?!exp) 断言此位置后面不能匹配exp
	(?<!exp) 断言此位置前面不能匹配exp